// Generated by CoffeeScript 1.4.0
(function() {
  var Gallery, Manipulater, PICTURES_TO_DISPLAY_ON_BUTTON, Photos, addPhotoButtonListener, addProjectButtonListener, domEditor, myPhotos, myProjects, photoGallery, projectGallery,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Manipulater = (function() {

    function Manipulater() {}

    Manipulater.prototype.createTags = function(anArray, tagType, key, attr) {
      var n, results, _i, _len;
      results = "";
      for (_i = 0, _len = anArray.length; _i < _len; _i++) {
        n = anArray[_i];
        results += "<" + tagType + " " + attr + "=" + n[key] + " >";
      }
      return results;
    };

    Manipulater.prototype.injectInto = function(parentDiv, elements) {
      return $("" + parentDiv).append(elements);
    };

    return Manipulater;

  })();

  Gallery = (function() {

    function Gallery(name) {
      this.name = name;
      this.hide = __bind(this.hide, this);

      this.display = __bind(this.display, this);

      this.setup = __bind(this.setup, this);

      this.element = null;
      this.navBar = "<div class='navHeader'><span class='backButton'><img src='./imgs/back.png'></span> \              <span class='forwardButton'><img src='./imgs/forward.png'></span>\              <span class='closeButton'><img src='imgs/close.png'></span></div>";
    }

    Gallery.prototype.setup = function(tags) {
      this.element = $("<div id='" + this.name + "'/>");
      this.element.append($("" + this.navBar));
      return this.element.append(tags);
    };

    Gallery.prototype.display = function(newParent) {
      var _this = this;
      this.element.appendTo(newParent);
      this.element.addClass("centerGallery");
      return $('.closeButton').on('click', function() {
        return _this.hide();
      });
    };

    Gallery.prototype.hide = function() {
      return this.element.detach();
    };

    return Gallery;

  })();

  Photos = (function() {

    function Photos(source) {
      this.source = source;
      this.get = __bind(this.get, this);

      this.format = __bind(this.format, this);

      this.NUM_TO_GET = 9;
      this.imgLinksRetrieved = false;
      this.photoArray = [];
    }

    Photos.prototype.format = function(data) {
      var photo, post, _i, _j, _len, _len1, _ref, _ref1;
      _ref = data.posts;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        post = _ref[_i];
        if (post.type === "photo") {
          if (post.photos.length === 0) {
            this.photoArray.push({
              tiny: post["photo-url-75"],
              small: post["photo-url-250"],
              big: post["photo-url-1280"]
            });
          } else {
            _ref1 = post.photos;
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              photo = _ref1[_j];
              this.photoArray.push({
                tiny: photo["photo-url-75"],
                small: photo["photo-url-250"],
                big: photo["photo-url-1280"]
              });
            }
          }
        }
      }
      return this.imgLinksRetrieved = true;
    };

    Photos.prototype.get = function() {
      var _this = this;
      return $.ajax(("http://" + this.source + "/api/read/json?num=") + this.NUM_TO_GET, {
        dataType: "jsonp",
        crossDomain: true,
        success: function(data) {
          return _this.format(data);
        },
        error: function() {
          return console.log("error");
        }
      });
    };

    return Photos;

  })();

  PICTURES_TO_DISPLAY_ON_BUTTON = 9;

  domEditor = new Manipulater();

  myPhotos = new Photos("wisechicken.tumblr.com");

  myProjects = new Photos("wpdprojects.tumblr.com");

  photoGallery = new Gallery("photoGallery");

  projectGallery = new Gallery("projectGallery");

  $.when(myPhotos.get()).done(function() {
    var smallImgTags, tinyImgTags;
    tinyImgTags = domEditor.createTags(myPhotos.photoArray.slice(0, PICTURES_TO_DISPLAY_ON_BUTTON), "img", "tiny", "src");
    domEditor.injectInto("#photoButton", tinyImgTags);
    addPhotoButtonListener();
    smallImgTags = domEditor.createTags(myPhotos.photoArray.slice(0, PICTURES_TO_DISPLAY_ON_BUTTON), "img", "small", "src");
    return photoGallery.setup(smallImgTags);
  });

  $.when(myProjects.get()).done(function() {
    var smallImgTags, tinyImgTags;
    tinyImgTags = domEditor.createTags(myProjects.photoArray.slice(0, PICTURES_TO_DISPLAY_ON_BUTTON), "img", "tiny", "src");
    domEditor.injectInto("#projectsButton", tinyImgTags);
    addProjectButtonListener();
    smallImgTags = domEditor.createTags(myProjects.photoArray.slice(0, PICTURES_TO_DISPLAY_ON_BUTTON), "img", "small", "src");
    return projectGallery.setup(smallImgTags);
  });

  addPhotoButtonListener = function() {
    return $("#photoButton").on("click", function(event) {
      console.log("Photo Clicked");
      $("#photoButton > img").addClass("gallery");
      return photoGallery.display("body");
    });
  };

  addProjectButtonListener = function() {
    return $("#projectsButton").on("click", function(event) {
      console.log("Photo Clicked");
      $("#photoButton > img").addClass("gallery");
      return projectGallery.display("body");
    });
  };

}).call(this);
