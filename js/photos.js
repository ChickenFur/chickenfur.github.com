// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(["js/gallery", "js/manipulater"], function(Gallery, Manipulater) {
    var Photos;
    Photos = (function() {

      function Photos(source, numToDisplay) {
        this.source = source;
        this.createButton = __bind(this.createButton, this);

        this.setupNextGalleryImages = __bind(this.setupNextGalleryImages, this);

        this.cacheNextGallery = __bind(this.cacheNextGallery, this);

        this.get = __bind(this.get, this);

        this.format = __bind(this.format, this);

        this.currentSetStartNum = 0;
        this.NUM_TO_GET = 9;
        this.numPicturesRetrieved = 0;
        this.allPhotosArray = [];
        this.prevGalleryArray = [];
        this.currentGalleryArray = [];
        this.nextGalleryArray = [];
        this.url = ("http://" + this.source + "/api/read/json?num=") + this.NUM_TO_GET;
        this.gallery = new Gallery("photoGallery");
        this.galleryNext = new Gallery("photoGallery2");
        this.domEditor = new Manipulater();
        this.numOfPictures = numToDisplay;
        this.smallImgTags;
      }

      Photos.prototype.format = function(data, photoArray) {
        var photo, post, _i, _j, _len, _len1, _ref, _ref1;
        _ref = data.posts;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          post = _ref[_i];
          if (post.type === "photo") {
            if (post.photos.length === 0) {
              this.allPhotosArray.push({
                tiny: post["photo-url-75"],
                small: post["photo-url-250"],
                big: post["photo-url-1280"],
                caption: post["photo-caption"]
              });
            } else {
              _ref1 = post.photos;
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                photo = _ref1[_j];
                this.allPhotosArray.push({
                  tiny: photo["photo-url-75"],
                  small: photo["photo-url-250"],
                  big: photo["photo-url-1280"]
                });
              }
            }
          }
        }
        return this.numPicturesRetrieved = this.allPhotosArray.length;
      };

      Photos.prototype.get = function(startNum, photoArray, callBack) {
        var _this = this;
        if (startNum == null) {
          startNum = 0;
        }
        if (photoArray == null) {
          photoArray = 0;
        }
        if (startNum !== 0) {
          this.url = this.url + ("&start=" + startNum);
        }
        return $.ajax(this.url, {
          dataType: "jsonp",
          crossDomain: true,
          success: function(data) {
            _this.format(data);
            if (callBack) {
              return callBack();
            }
          },
          error: function() {
            return console.log("error");
          }
        });
      };

      Photos.prototype.cacheNextGallery = function() {
        if (this.numPicturesRetrieved < 18) {
          return this.get(this.currentSetStartNum + this.numOfPictures, 1, this.setupImages);
        } else {
          this.nextGalleryArray = this.allPhotosArray.slice(this.numOfPictures, this.numOfPictures + this.numOfPictures);
          return this.setupNextGalleryImages();
        }
      };

      Photos.prototype.setupNextGalleryImages = function() {
        var smallImgTags,
          _this = this;
        smallImgTags = this.domEditor.createTags(this.nextGalleryArray.slice(0, this.numOfPictures), "img", "small", "src");
        smallImgTags = this.domEditor.wrapTags(smallImgTags, this.nextGalleryArray.slice(0, this.numOfPictures), "a", "big", "href");
        this.galleryNext.setup(smallImgTags);
        return $(".forwardButton").on("click", function(event) {
          _this.gallery.hide();
          return _this.galleryNext.display("body");
        });
      };

      Photos.prototype.createButton = function(container, listener) {
        var smallImgTags, tinyImgTags;
        tinyImgTags = this.domEditor.createTags(this.allPhotosArray.slice(0, this.numOfPictures), "img", "tiny", "src");
        this.domEditor.injectInto(container, tinyImgTags);
        listener();
        smallImgTags = this.domEditor.createTags(this.allPhotosArray.slice(0, this.numOfPictures), "img", "small", "src");
        return this.smallImgTags = this.domEditor.wrapTags(smallImgTags, this.allPhotosArray.slice(0, this.numOfPictures), "a", "big", "href");
      };

      Photos.prototype.setupGallery = function() {
        this.gallery.setup(this.smallImgTags);
        return this.cacheNextGallery();
      };

      return Photos;

    })();
    return Photos;
  });

}).call(this);
